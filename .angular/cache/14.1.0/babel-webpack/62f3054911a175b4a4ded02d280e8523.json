{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/haris/OneDrive/Desktop/google-keeps/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { liveQuery } from 'dexie';\nimport { db } from '../db/db';\nimport * as i0 from \"@angular/core\";\nexport class NotesService {\n  constructor() {\n    this.notesList$ = liveQuery(() => db.notes.toArray());\n  }\n\n  add(noteObj) {\n    return _asyncToGenerator(function* () {\n      try {\n        return yield db.notes.add(noteObj);\n      } catch (error) {\n        console.log(error);\n        return -1;\n      }\n    })();\n  }\n\n  update(object, id) {\n    if (id !== -1) {\n      try {\n        db.notes.update(id, object);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  updateKey(object, id) {\n    if (id !== -1) {\n      try {\n        db.notes.update(id, object);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  get(id) {\n    return _asyncToGenerator(function* () {\n      if (id !== -1) {\n        let noteData = yield db.notes.where({\n          id: id\n        }).toArray();\n        return noteData[0];\n      } else return {};\n    })();\n  }\n\n  clone(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (id !== -1) {\n        try {\n          let object = yield db.notes.where({\n            id: id\n          }).toArray();\n          delete object[0].id;\n\n          _this.add(object[0]);\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    })();\n  }\n\n  delete(id) {\n    if (id !== -1) {\n      try {\n        db.notes.delete(id);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  updateAllLabels(labelId, labelValue) {\n    //how i miss relational databases here ðŸ˜Ÿ\n    try {\n      db.transaction('rw', db.notes, () => {\n        try {\n          db.notes.each(el => {\n            db.notes.where('id').equals(el.id).modify(note => {\n              if (labelValue === '') {\n                let i = note.labels.findIndex(x => x.id === labelId);\n                note.labels.splice(i, 1);\n              } else {\n                let label = note.labels.find(x => x.id === labelId);\n                if (label) label.name = labelValue;\n              }\n            });\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}\n\nNotesService.Éµfac = function NotesService_Factory(t) {\n  return new (t || NotesService)();\n};\n\nNotesService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n  token: NotesService,\n  factory: NotesService.Éµfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["liveQuery","db","NotesService","constructor","notes","toArray","add","noteObj","error","console","log","update","object","id","updateKey","get","noteData","where","clone","delete","updateAllLabels","labelId","labelValue","transaction","each","el","equals","modify","note","i","labels","findIndex","x","splice","label","find","name","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\haris\\OneDrive\\Desktop\\google-keeps\\src\\app\\services\\notes.service.ts"],"sourcesContent":["import { NoteI, UpdateKeyI } from './../interfaces/notes';\nimport { Injectable } from '@angular/core';\nimport { liveQuery } from 'dexie';\nimport { db } from '../db/db'\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotesService {\n\n  constructor() { }\n\n  notesList$ = liveQuery(() => db.notes.toArray())\n\n  async add(noteObj: NoteI) {\n    try {\n      return await db.notes.add(noteObj)\n    } catch (error) {\n      console.log(error)\n      return -1\n    }\n  }\n\n  update(object: NoteI, id: number) {\n    if (id !== -1) {\n      try {\n        db.notes.update(id, object)\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  }\n\n  updateKey(object: UpdateKeyI, id: number) {\n    if (id !== -1) {\n      try {\n        db.notes.update(id, object)\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  }\n\n  async get(id: number) {\n    if (id !== -1) {\n      let noteData = await db.notes.where({ id: id }).toArray()\n      return noteData[0]\n    } else return {} as NoteI\n\n  }\n\n  async clone(id: number) {\n    if (id !== -1) {\n      try {\n        let object = await db.notes.where({ id: id }).toArray()\n        delete object[0].id\n        this.add(object[0])\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  }\n\n  delete(id: number) {\n    if (id !== -1) {\n      try {\n        db.notes.delete(id)\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  }\n\n  updateAllLabels(labelId: number, labelValue: string) {\n    //how i miss relational databases here ðŸ˜Ÿ\n    try {\n      db.transaction('rw', db.notes, () => {\n        try {\n          db.notes.each(el => {\n            db.notes.where('id').equals(el.id!).modify((note: NoteI) => {\n              if (labelValue === '') {\n                let i = note.labels.findIndex(x => x.id === labelId)\n                note.labels.splice(i, 1)\n              } else {\n                let label = note.labels.find(x => x.id === labelId)\n                if (label) label.name = labelValue\n              }\n            })\n          })\n        } catch (error) {\n          console.log(error)\n        }\n      })\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}