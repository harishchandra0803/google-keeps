{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/haris/OneDrive/Desktop/project/google-keep-clone-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { createPopper } from '@popperjs/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./notes.service\";\nimport * as i2 from \"./labels.service\";\nexport class SharedService {\n  constructor(Notes, Labels) {\n    var _this = this;\n\n    this.Notes = Notes;\n    this.Labels = Labels;\n    this.get = {\n      notes: () => {\n        this.Notes.notesList$.subscribe({\n          next: result => {\n            this.note.pinned = result.filter(x => x.pinned === true).reverse();\n            this.note.unpinned = result.filter(x => x.pinned === false).reverse();\n            this.note.all = result.reverse();\n          },\n          error: error => console.error(error)\n        });\n      },\n      labels: () => {\n        this.Labels.labelsList$.subscribe({\n          next: result => this.label.list = result.reverse(),\n          error: error => console.error(error)\n        });\n      }\n    };\n    this.closeSideBar = new Subject();\n    this.saveNote = new Subject();\n    this.closeModal = new Subject();\n    this.noteViewType = new BehaviorSubject('grid'); // ? note -------------------------------------------------\n\n    this.note = {\n      id: -1,\n      pinned: [],\n      unpinned: [],\n      all: [],\n      db: {\n        add: data => this.Notes.add(data),\n        update: data => this.Notes.update(data, this.note.id),\n        updateKey: data => this.Notes.updateKey(data, this.note.id),\n        updateAllLabels: (labelId, labelValue) => this.Notes.updateAllLabels(labelId, labelValue),\n        get: () => this.Notes.get(this.note.id),\n        clone: () => this.Notes.clone(this.note.id),\n        delete: () => this.Notes.delete(this.note.id),\n        trash: () => {\n          this.note.db.updateKey({\n            trashed: true,\n            archived: false\n          });\n          this.snackBar({\n            action: 'trashed',\n            opposite: 'restored'\n          }, {\n            trashed: false\n          }, this.note.id);\n        }\n      }\n    }; // ? labell -------------------------------------------------\n\n    this.label = {\n      id: -1,\n      list: [],\n      db: {\n        add: function () {\n          var _ref = _asyncToGenerator(function* (data) {\n            return _this.Labels.add(data);\n          });\n\n          return function add(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }(),\n        update: data => this.Labels.update(data, this.label.id),\n        delete: () => this.Labels.delete(this.label.id),\n        updateAllLabels: value => this.note.db.updateAllLabels(this.label.id, value)\n      }\n    };\n    this.get.labels();\n    this.get.notes();\n  } // ? snakebar (aka toast) --------------------------------------\n\n\n  snackBar(text, obj, noteId) {\n    Snackbar.show({\n      pos: 'bottom-left',\n      text: `Note ${text.action}`,\n      actionText: 'Undo',\n      duration: 4200,\n      onActionClick: () => {\n        this.note.id = noteId;\n        this.note.db.updateKey(obj);\n        Snackbar.show({\n          pos: 'bottom-left',\n          text: `Note ${text.opposite}`,\n          duration: 3000\n        });\n      }\n    });\n  } // ? Tooltip --------------------------------------\n\n\n  createTooltip(button, tooltipEl) {\n    tooltipEl.dataset['isTooltipOpen'] = 'true';\n    createPopper(button, tooltipEl); //\n\n    let fct = event => {\n      if (!tooltipEl.contains(event.target)) {\n        document.removeEventListener('mousedown', fct);\n        tooltipEl.dataset['isTooltipOpen'] = 'false';\n      }\n    };\n\n    document.addEventListener('mousedown', fct);\n  }\n\n  closeTooltip(tooltipEl) {\n    tooltipEl.dataset['isTooltipOpen'] = 'false';\n  }\n\n}\n\nSharedService.ɵfac = function SharedService_Factory(t) {\n  return new (t || SharedService)(i0.ɵɵinject(i1.NotesService), i0.ɵɵinject(i2.LabelsService));\n};\n\nSharedService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SharedService,\n  factory: SharedService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","Subject","createPopper","SharedService","constructor","Notes","Labels","notes","notesList$","subscribe","next","result","note","pinned","filter","x","reverse","unpinned","all","error","console","labels","labelsList$","label","list","id","db","add","data","update","updateKey","updateAllLabels","labelId","labelValue","get","clone","delete","trash","trashed","archived","snackBar","action","opposite","value","text","obj","noteId","Snackbar","show","pos","actionText","duration","onActionClick","createTooltip","button","tooltipEl","dataset","fct","event","contains","target","document","removeEventListener","addEventListener","closeTooltip","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\haris\\OneDrive\\Desktop\\project\\google-keep-clone-master\\src\\app\\services\\shared.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { NoteI, NoteModelI, UpdateKeyI } from '../interfaces/notes';\nimport { NotesService } from './notes.service';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { LabelsService } from './labels.service';\nimport { LabelI, LabelModelI } from '../interfaces/labels';\nimport { createPopper } from '@popperjs/core';\ndeclare var Snackbar: any\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedService {\n\n  constructor(private Notes: NotesService, private Labels: LabelsService) {\n    this.get.labels()\n    this.get.notes()\n  }\n\n  private get = {\n    notes: () => {\n      this.Notes.notesList$.subscribe({\n        next: (result: NoteI[]) => {\n          this.note.pinned = result.filter(x => x.pinned === true).reverse()\n          this.note.unpinned = result.filter(x => x.pinned === false).reverse()\n          this.note.all = result.reverse()\n        },\n        error: error => console.error(error)\n      })\n    },\n    labels: () => {\n      this.Labels.labelsList$.subscribe({\n        next: (result: LabelI[]) => this.label.list = result.reverse(),\n        error: error => console.error(error)\n      })\n    }\n  }\n\n  closeSideBar = new Subject<boolean>()\n  saveNote = new Subject<boolean>()\n  closeModal = new Subject<boolean>()\n  noteViewType = new BehaviorSubject<'list' | 'grid'>('grid')\n\n  // ? note -------------------------------------------------\n\n  note: NoteModelI = {\n    id: -1,\n    pinned: [],\n    unpinned: [],\n    all: [],\n    db: {\n      add: (data: NoteI) => this.Notes.add(data),\n      update: (data: NoteI) => this.Notes.update(data, this.note.id),\n      updateKey: (data: UpdateKeyI) => this.Notes.updateKey(data, this.note.id),\n      updateAllLabels: (labelId: number, labelValue: string) => this.Notes.updateAllLabels(labelId, labelValue),\n      get: () => this.Notes.get(this.note.id),\n      clone: () => this.Notes.clone(this.note.id),\n      delete: () => this.Notes.delete(this.note.id),\n      trash: () => {\n        this.note.db.updateKey({ trashed: true, archived: false })\n        this.snackBar({ action: 'trashed', opposite: 'restored' }, { trashed: false }, this.note.id)\n      },\n    },\n\n  }\n\n  // ? labell -------------------------------------------------\n\n  label: LabelModelI = {\n    id: -1,\n    list: [],\n    db: {\n      add: async (data: LabelI) => this.Labels.add(data),\n      update: (data: LabelI) => this.Labels.update(data, this.label.id),\n      delete: () => this.Labels.delete(this.label.id),\n      updateAllLabels: (value) => this.note.db.updateAllLabels(this.label.id, value),\n    }\n  }\n\n  // ? snakebar (aka toast) --------------------------------------\n\n  snackBar(text: { action: string, opposite: string }, obj: UpdateKeyI, noteId: number) {\n    Snackbar.show({\n      pos: 'bottom-left',\n      text: `Note ${text.action}`,\n      actionText: 'Undo',\n      duration: 4200,\n      onActionClick: () => {\n        this.note.id = noteId\n        this.note.db.updateKey(obj)\n        Snackbar.show({\n          pos: 'bottom-left',\n          text: `Note ${text.opposite}`,\n          duration: 3000,\n        })\n      }\n    })\n  }\n\n\n  // ? Tooltip --------------------------------------\n\n  createTooltip(button: HTMLDivElement, tooltipEl: HTMLDivElement) {\n    tooltipEl.dataset['isTooltipOpen'] = 'true'\n    createPopper(button, tooltipEl)\n    //\n    let fct = (event: Event) => {\n      if (!(tooltipEl as any).contains(event.target)) {\n        document.removeEventListener('mousedown', fct);\n        tooltipEl.dataset['isTooltipOpen'] = 'false'\n      }\n    }\n    document.addEventListener('mousedown', fct)\n  }\n\n  closeTooltip(tooltipEl: HTMLDivElement) {\n    tooltipEl.dataset['isTooltipOpen'] = 'false'\n  }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}